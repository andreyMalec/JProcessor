package jProcessor.core.generation;

import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;

import javax.annotation.processing.Filer;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.type.TypeMirror;

import jProcessor.util.Logger;

public abstract class BaseGenerator<T> {
    protected final Logger log;
    protected final Filer filer;
    protected final RoundEnvironment roundEnv;

    protected final String GET = "get";
    protected final String PROVIDER = "Provider";
    protected final String INSTANCE = "instance";
    protected final String MODULE = "module";
    protected final String INJECT = "inject";
    protected final String INJECT_MEMBERS = "injectMembers";
    protected final String INJECTOR = "Injector";
    protected final String MEMBERS_INJECTOR = "MembersInjector";

    public BaseGenerator(Logger log, Filer filer, RoundEnvironment roundEnv) {
        this.log = log;
        this.filer = filer;
        this.roundEnv = roundEnv;
    }

    public abstract T generate();

    protected String getPackage(String name) {
        return name.substring(name.lastIndexOf(".")+1);
    }

    protected String simpleName(TypeName type) {
        String[] a = type.toString().split("\\.");
        return a[a.length - 1];
    }

    protected TypeName name(TypeMirror type) {
        return TypeName.get(type);
    }

    protected void createFile(TypeSpec module, String packageName) {
        JavaFile javaFile = JavaFile.builder(packageName, module)
                .skipJavaLangImports(true).addFileComment("Generated by jProcessor.")
                .indent("     ").build();
        try {
            log.note("createFile", javaFile);
            javaFile.writeTo(filer);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
